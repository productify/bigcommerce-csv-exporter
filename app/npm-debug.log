0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/bin/npm', 'install', 'node-gearman', '--save' ]
2 info using npm@2.5.1
3 info using node@v0.10.33
4 verbose node symlink /usr/bin/node
5 silly cache add args [ 'node-gearman', null ]
6 verbose cache add spec node-gearman
7 silly cache add parsed spec { raw: 'node-gearman',
7 silly cache add   scope: null,
7 silly cache add   name: 'node-gearman',
7 silly cache add   rawSpec: '',
7 silly cache add   spec: '*',
7 silly cache add   type: 'range' }
8 verbose addNamed node-gearman@*
9 silly addNamed semver.valid null
10 silly addNamed semver.validRange *
11 silly addNameRange { name: 'node-gearman', range: '*', hasData: false }
12 silly mapToRegistry name node-gearman
13 silly mapToRegistry using default registry
14 silly mapToRegistry registry https://registry.npmjs.org/
15 silly mapToRegistry uri https://registry.npmjs.org/node-gearman
16 verbose addNameRange registry:https://registry.npmjs.org/node-gearman not in flight; fetching
17 verbose request uri https://registry.npmjs.org/node-gearman
18 verbose request no auth needed
19 info attempt registry request try #1 at 10:26:20
20 verbose request id b464fc90a3b6a2a8
21 http request GET https://registry.npmjs.org/node-gearman
22 http 200 https://registry.npmjs.org/node-gearman
23 silly get cb [ 200,
23 silly get   { date: 'Mon, 09 Mar 2015 23:26:20 GMT',
23 silly get     server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
23 silly get     etag: '"7X4HP6CVN6EC1LUSP3LYUWNCC"',
23 silly get     'content-type': 'application/json',
23 silly get     'cache-control': 'max-age=60',
23 silly get     'content-length': '18419',
23 silly get     'accept-ranges': 'bytes',
23 silly get     via: '1.1 varnish',
23 silly get     age: '0',
23 silly get     'x-served-by': 'cache-syd1622-SYD',
23 silly get     'x-cache': 'MISS',
23 silly get     'x-cache-hits': '0',
23 silly get     'x-timer': 'S1425943579.938885,VS0,VE233',
23 silly get     vary: 'Accept',
23 silly get     'keep-alive': 'timeout=10, max=50',
23 silly get     connection: 'Keep-Alive' } ]
24 verbose get saving node-gearman to /home/vagrant/.npm/registry.npmjs.org/node-gearman/.cache.json
25 silly addNameRange number 2 { name: 'node-gearman', range: '*', hasData: true }
26 silly addNameRange versions [ 'node-gearman',
26 silly addNameRange   [ '0.1.0',
26 silly addNameRange     '0.1.1',
26 silly addNameRange     '0.1.2',
26 silly addNameRange     '0.1.3',
26 silly addNameRange     '0.1.4',
26 silly addNameRange     '0.1.5',
26 silly addNameRange     '0.2.0',
26 silly addNameRange     '0.2.1',
26 silly addNameRange     '0.2.2' ] ]
27 verbose addNamed node-gearman@0.2.2
28 silly addNamed semver.valid 0.2.2
29 silly addNamed semver.validRange 0.2.2
30 silly mapToRegistry name node-gearman
31 silly mapToRegistry using default registry
32 silly mapToRegistry registry https://registry.npmjs.org/
33 silly mapToRegistry uri https://registry.npmjs.org/node-gearman
34 verbose addRemoteTarball https://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz not in flight; adding
35 verbose addRemoteTarball [ 'https://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz',
35 verbose addRemoteTarball   'ace212787c905c3edf5457a83206596ff871b074' ]
36 info retry fetch attempt 1 at 10:26:21
37 info attempt registry request try #1 at 10:26:21
38 http fetch GET https://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz
39 http fetch 200 https://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz
40 silly fetchAndShaCheck shasum ace212787c905c3edf5457a83206596ff871b074
41 verbose addTmpTarball /tmp/npm-11475-4ccbd28c/registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz not in flight; adding
42 verbose addTmpTarball already have metadata; skipping unpack for node-gearman@0.2.2
43 silly cache afterAdd node-gearman@0.2.2
44 verbose afterAdd /home/vagrant/.npm/node-gearman/0.2.2/package/package.json not in flight; writing
45 verbose afterAdd /home/vagrant/.npm/node-gearman/0.2.2/package/package.json written
46 silly install resolved [ { name: 'node-gearman',
46 silly install resolved     description: 'Simple Gearman client/worker module for Node.JS',
46 silly install resolved     version: '0.2.2',
46 silly install resolved     author: { name: 'Andris Reinman' },
46 silly install resolved     maintainers: [ [Object] ],
46 silly install resolved     homepage: 'http://github.com/andris9/node-gearman',
46 silly install resolved     repository:
46 silly install resolved      { type: 'git',
46 silly install resolved        url: 'http://github.com/andris9/node-gearman.git' },
46 silly install resolved     scripts: { test: 'node ./run_tests.js' },
46 silly install resolved     devDependencies: { nodeunit: '*' },
46 silly install resolved     main: './lib/gearman',
46 silly install resolved     licenses: [ [Object] ],
46 silly install resolved     engine: { node: '>=0.5' },
46 silly install resolved     keywords: [ 'gearman', 'worker', 'message queue' ],
46 silly install resolved     readme: '# node-gearman\n\n**node-gearman** is an extremely simple Gearman client/worker module for Node.JS. You can register workers and you can submit jobs, that\'s all about it.\n\n[![Build Status](https://secure.travis-ci.org/andris9/node-gearman.png)](http://travis-ci.org/andris9/node-gearman)\n\n**NB!** Breaking API change - `\'connected\'` events etc are now called `\'connect\'`.\n\n## Support node-gearman development\n\n[![Donate to author](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=DB26KWR2BQX5W)\n\n## Installation\n\nInstall through *npm*\n\n    npm install node-gearman\n\n## Usage\n\nSee [examples](https://github.com/andris9/node-gearman/tree/master/examples) folder for sample scripts\n\n## Connect to a Gearman server\n\nSet up connection data and create a new `Gearman` object\n\n    var Gearman = require("node-gearman");\n    var gearman = new Gearman(hostname, port);\n\nWhere `hostname` defaults to `"localhost"` and `port` to `4730`\n\nThis doesn\'t actually create the connection yet. Connection is created when needed but you can force it with `gearman.connect()`\n\n    var gearman = new Gearman(hostname, port);\n    gearman.connect();\n\n## Connection events\n\nThe following events can be listened for a `Gearman` object:\n\n  * **connect** - when the connection has been successfully established to the server\n  * **idle** - when there\'s no jobs available for workers\n  * **close** - connection closed\n  * **error** - an error occured. Connection is automatically closed.\n\nExample:\n\n    var gearman = new Gearman(hostname, port);\n    gearman.on("connect", function(){\n        console.log("Connected to the server!");\n    });\n    gearman.connect();\n\n## Submit a Job\n\nJobs can be submitted with `gearman.submitJob(name, payload)` where `name` is the name of the function and `payload` is a string or a Buffer. The returned object (Event Emitter) can be used to detect job status and has the following events:\n\n  * **error** - if the job failed, has parameter error\n  * **data** - contains a chunk of data as a Buffer\n  * **end** - when the job has been completed, has no parameters\n  * **timeout** - when the job has been canceled due to timeout\n\nExample:\n\n    var gearman = new Gearman(hostname, port);\n    var job = gearman.submitJob("reverse", "test string");\n\n    job.on("data", function(data){\n        console.log(data.toString("utf-8")); // gnirts tset\n    });\n\n    job.on("end", function(){\n        console.log("Job completed!");\n    });\n\n    job.on("error", function(error){\n        console.log(error.message);\n    });\n\n## Setup a Worker\n\nWorkers can be set up with `gearman.registerWorker(name, callback)` where `name` is the name of the function and `callback` is the function to be run when a job is received.\n\nWorker function `callback` gets two parameters - `payload` (received data as a Buffer) and `worker` which is a helper object to communicate with the server. `worker` object has following methods:\n\n  * **write(data)** - for sending data chunks to the client\n  * **end([data])** for completing the job\n  * **error()** to indicate that the job failed\n\nExample:\n\n    var gearman = new Gearman(hostname, port);\n\n    gearman.registerWorker("reverse", function(payload, worker){\n        if(!payload){\n            worker.error();\n            return;\n        }\n        var reversed = payload.toString("utf-8").split("").reverse().join("");\n        worker.end(reversed);\n    });\n\n## Job timeout\n\nYou can set an optional timeout value (in milliseconds) for a job to abort it automatically when the timeout occurs.\n\nTimeout automatically aborts further processing of the job.\n\n    job.setTimeout(timeout[, timeoutCallback]);\n\nIf `timeoutCallback` is not set, a `\'timeout\'` event is emitted on timeout.\n\n    job.setTimeout(10*1000); // timeout in 10 secs\n    job.on("timeout", function(){\n        console.log("Timeout exceeded for the worker. Job aborted.");\n    }); \n\n## Close connection\n\nYou can close the Geamrna connection with `close()`\n\n    var gearman = new Gearman();\n    ...\n    gearman.close();\n\nThe connection is closed when a `\'close\'` event for the Gearman object is emitted\n\n    gearman.on("close", function(){\n        console.log("Connection closed");\n    });\n    \n    gearman.close();\n\n## Streaming\n\nWorker and job objects also act as Stream objects (workers are writable and jobs readable streams), so you can stream data with `pipe` from a worker to a client (but not the other way round). This is useful for zipping/unzipping etc.\n\n**NB!** Streaming support is experimental, do not send very large files as the data tends to clutter up (workers stream interface lacks support for pausing etc.).\n\n**Streaming worker**\n\n    gearman.registerWorker("stream_file", function(payload, worker){\n        var input = fs.createReadStream(filepath);\n        // stream file to client\n        input.pipe(worker);\n    });\n\n**Streaming client**\n\n    var job = gearman.submitJob("stream", null),\n        output = fs.createWriteStream(filepath); \n    \n    // save incoming stream to file\n    job.pipe(output);\n\n## Run tests\n\nRun the tests with\n\n    npm test\n    \nor alternatively\n\n    node run_tests.js\n## License\n\n**MIT**',
46 silly install resolved     readmeFilename: 'README.md',
46 silly install resolved     _id: 'node-gearman@0.2.2',
46 silly install resolved     dist:
46 silly install resolved      { shasum: 'ace212787c905c3edf5457a83206596ff871b074',
46 silly install resolved        tarball: 'http://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz' },
46 silly install resolved     _from: 'node-gearman@*',
46 silly install resolved     _npmVersion: '1.2.18',
46 silly install resolved     _npmUser: { name: 'andris', email: 'andris@node.ee' },
46 silly install resolved     directories: {},
46 silly install resolved     _shasum: 'ace212787c905c3edf5457a83206596ff871b074',
46 silly install resolved     _resolved: 'https://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz' } ]
47 info install node-gearman@0.2.2 into /vagrant/srv/bigcommerce-csv-exporter/app
48 info installOne node-gearman@0.2.2
49 verbose installOne of node-gearman to /vagrant/srv/bigcommerce-csv-exporter/app not in flight; installing
50 warn locking Error: EACCES, open '/home/vagrant/.npm/_locks/node-gearman-6e16c458bb0e216b.lock'
50 warn locking  /home/vagrant/.npm/_locks/node-gearman-6e16c458bb0e216b.lock failed { [Error: EACCES, open '/home/vagrant/.npm/_locks/node-gearman-6e16c458bb0e216b.lock']
50 warn locking   errno: 3,
50 warn locking   code: 'EACCES',
50 warn locking   path: '/home/vagrant/.npm/_locks/node-gearman-6e16c458bb0e216b.lock' }
51 verbose stack Error: Attempt to unlock /vagrant/srv/bigcommerce-csv-exporter/app/node_modules/node-gearman, which hasn't been locked
51 verbose stack     at unlock (/usr/lib/node_modules/npm/lib/utils/locker.js:66:11)
51 verbose stack     at cb (/usr/lib/node_modules/npm/lib/install.js:929:5)
51 verbose stack     at /usr/lib/node_modules/npm/lib/install.js:933:20
51 verbose stack     at /usr/lib/node_modules/npm/lib/utils/locker.js:40:9
51 verbose stack     at cb (/usr/lib/node_modules/npm/node_modules/lockfile/lockfile.js:149:38)
51 verbose stack     at /usr/lib/node_modules/npm/node_modules/lockfile/lockfile.js:177:38
51 verbose stack     at Object.oncomplete (fs.js:107:15)
52 verbose cwd /vagrant/srv/bigcommerce-csv-exporter/app
53 error Linux 3.2.0-72-generic-pae
54 error argv "node" "/usr/bin/npm" "install" "node-gearman" "--save"
55 error node v0.10.33
56 error npm  v2.5.1
57 error Attempt to unlock /vagrant/srv/bigcommerce-csv-exporter/app/node_modules/node-gearman, which hasn't been locked
58 error If you need help, you may report this error at:
58 error     <http://github.com/npm/npm/issues>
59 verbose exit [ 1, true ]
